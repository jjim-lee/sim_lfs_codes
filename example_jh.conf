# This program is developed from Jinhyuk Lee as Master thesis in Goethe University.
# This program start from example file in codes-dev git repository. (Location : codes-dev/doc/example/example.conf)
# This configuration file is modified with the purpose of running Lustre file system simulation
# Final modification : 18/10/2023

# the LPGROUPS set is required by all simulations using codes. Multiple groups 
# can be entered (only one is here for our example), each consisting of a set 
# of application- and codes-specific key-value pairs. 
LPGROUPS
{
    client
    {   
        repetitions="1";
        client="1";
        modelnet_simplenet="1";
    }   
    MD_server
    {   
        repetitions="1";
        mds="1";
        modelnet_simplenet="1";
    }   
    MD_storage
    {   
        repetitions="1";
        mdt="1";
        modelnet_simplenet="1";
    }   
    OS_server
    {   
        repetitions="4";
        oss="1";
        modelnet_simplenet="1";
    }   
    OS_storage
    {   
        repetitions="20";
        ost="1";
        modelnet_simplenet="1";
    }   
}
# required by CODES: miscellaneous parameters used in the simulation that 
# don't fit in group definition. 
PARAMS
{
   # ROSS-specific parmeters:
   # - message_size: ROSS expects you to upper bound your event message size.
   #                 Going over this size will crash or otherwise destroy your 
   #                 simulation.
   message_size="26912";
   # - pe_mem_factor: this is a multiplier to the event memory allocation that
   #                  ROSS does up front (multiplier is per-PE). Increase this 
   #                  (or change the associated mem_factor variable in
   #                  codes-base) if you have a (very) large event population.
   pe_mem_factor="1024";
   # model-net-specific parameters: 
   # - individual packet sizes for network operations
   #   (each "packet" is represented by an event)
   # - independent of underlying network being used
   packet_size="1024";
   # - order that network types will be presented to the user in
   #   model_net_set_params. In this example, we're only using a single
   #   network
   modelnet_order=("simplenet");
   # - message scheduling algorithm (on a per-packet basis)
   modelnet_scheduler="fcfs"; # first come first serve
   #modelnet_scheduler="round-robin"; # round-robin
   # - model-specific parameters
   net_startup_ns="1.5";
   net_bw_mbps="20000"; # unit : Mbyte/s
}

# custom parameter sets can also be added - this one is used to define the
# rounds of communication the servers will undergo
clt_req
{
	num_reqs="5";
	payload_sz="1280";
}

